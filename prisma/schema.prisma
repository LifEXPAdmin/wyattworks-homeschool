// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model - synced with Clerk authentication
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  worksheets   Worksheet[]
  exportLogs   ExportLog[]
  subscription Subscription?
  creditLedger CreditLedger[]
  reports      Report[]
  profile      UserProfile?
  students     Student[] // Students managed by this user

  @@index([clerkId])
  @@index([email])
}

// User profile model - extended user information
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  avatar      String? // URL to avatar image
  timezone    String   @default("UTC")
  language    String   @default("en")
  preferences Json? // User preferences as JSON
  settings    Json? // User settings as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Student model - students managed by users
model Student {
  id          String   @id @default(cuid())
  userId      String   // Parent/teacher who manages this student
  firstName   String
  lastName    String?
  gradeLevel  String   @default("K")
  birthDate   DateTime?
  avatar      String? // URL to avatar image
  preferences Json? // Student-specific preferences
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([gradeLevel])
}

// Worksheet model - represents a created worksheet
model Worksheet {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  content     String // JSON content of the worksheet
  subject     String? // Math, Science, Language Arts, etc.
  gradeLevel  String? // K, 1-12, etc.
  status      String   @default("draft") // draft, published, archived
  isPublic    Boolean  @default(false)
  templateId  String? // If created from a template
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template?   @relation(fields: [templateId], references: [id], onDelete: SetNull)
  exportLogs ExportLog[]
  reports    Report[]

  @@index([userId])
  @@index([templateId])
  @@index([status])
  @@index([subject])
  @@index([createdAt])
}

// ExportLog model - tracks worksheet exports (PDF, print, etc.)
model ExportLog {
  id          String   @id @default(cuid())
  userId      String
  worksheetId String
  format      String // PDF, PNG, DOCX, etc.
  configHash  String // Hash of export configuration to detect duplicates
  metadata    String? // JSON metadata about the export
  createdAt   DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  worksheet Worksheet @relation(fields: [worksheetId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate exports with same config
  @@unique([userId, configHash])
  @@index([userId])
  @@index([worksheetId])
  @@index([createdAt])
}

// Template model - pre-made worksheet templates
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String // JSON template structure
  subject     String? // Math, Science, Language Arts, etc.
  gradeLevel  String? // K, 1-12, etc.
  category    String? // Worksheet type category
  thumbnailUrl String?
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  worksheets Worksheet[]

  @@index([subject])
  @@index([gradeLevel])
  @@index([category])
  @@index([isPublic])
  @@index([isPremium])
}

// Subscription model - user subscription/plan information
model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  plan               String    @default("free") // free, basic, pro, premium
  status             String    @default("active") // active, canceled, expired, past_due, trialing
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  trialEnd           DateTime? // When the trial period ends
  cancelAtPeriodEnd  Boolean   @default(false)
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
}

// CreditLedger model - tracks credit-based usage (exports, AI features, etc.)
model CreditLedger {
  id          String   @id @default(cuid())
  userId      String
  amount      Int // Positive for credits added, negative for credits used
  balance     Int // Running balance after this transaction
  type        String // purchase, usage, bonus, refund, etc.
  description String? // What the credits were used for
  metadata    String? // JSON metadata
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

// Report model - analytics and progress reports
model Report {
  id          String   @id @default(cuid())
  userId      String
  worksheetId String?
  type        String // completion, progress, performance, etc.
  title       String
  data        String // JSON report data
  dateFrom    DateTime?
  dateTo      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  worksheet Worksheet? @relation(fields: [worksheetId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([worksheetId])
  @@index([type])
  @@index([createdAt])
}
